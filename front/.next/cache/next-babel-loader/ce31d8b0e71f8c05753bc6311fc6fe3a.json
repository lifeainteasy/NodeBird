{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, call, put, take, delay, takeLatest } from 'redux-saga/effects';\nimport { LOG_IN, LOG_OUT, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\nimport { takeEvery } from 'redux-saga/effects';\n\nfunction loginAPI() {//서버에 요청을 보내는 부분\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(100);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          takeLatest(LOG_IN,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee() {\n            return _regeneratorRuntime.wrap(function _callee$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return put({\n                      type: LOG_IN_SUCCESS\n                    });\n\n                  case 2:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchSignUp() {}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([watchLogin(), watchSignUp()]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/NodeBird/ch1/front/sagas/user.js"],"names":["login","watchLogin","userSaga","all","fork","call","put","take","delay","takeLatest","LOG_IN","LOG_OUT","LOG_IN_SUCCESS","LOG_IN_FAILURE","takeEvery","loginAPI","type","console","log","watchSignUp"],"mappings":";;;;yBAaUA,K;;;yBAiBAC,U;;;yBAsBeC,Q;;AApDzB,SAAQC,GAAR,EAAYC,IAAZ,EAAiBC,IAAjB,EAAsBC,GAAtB,EAA0BC,IAA1B,EAA+BC,KAA/B,EAAsCC,UAAtC,QAAuD,oBAAvD;AACA,SAAQC,MAAR,EAAeC,OAAf,EAAuBC,cAAvB,EAA0CC,cAA1C,QACO,kBADP;AAEA,SAASC,SAAT,QAA0B,oBAA1B;;AAIA,SAASC,QAAT,GACA,CACI;AACH;;AAGD,SAAUf,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAII,iBAAMQ,KAAK,CAAC,GAAD,CAAX;;AAJJ;AAAA;AAKQ,iBAAMF,GAAG,CAAC;AACNU,YAAAA,IAAI,EAAEJ;AADA,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUQK,UAAAA,OAAO,CAACC,GAAR;AAVR;AAWQ,iBAAMZ,GAAG,CAAC;AACNU,YAAAA,IAAI,EAAEH;AADA,WAAD,CAAT;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUZ,UAAV;AAAA;AAAA;AAAA;AAAA;AAGIQ,UAAAA,UAAU,CAACC,MAAD;AAAA;AAAA,mCAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAEd,2BAAMJ,GAAG,CAAC;AACNU,sBAAAA,IAAI,EAAEJ;AADA,qBAAD,CAAT;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAR,EAAV;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAASO,WAAT,GAEA,CAEC;;AAKD,eAAe,SAAUjB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEV,iBAAMC,GAAG,CAAC,CAENF,UAAU,EAFJ,EAGNkB,WAAW,EAHL,CAAD,CAAT;;AAFU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all,fork,call,put,take,delay, takeLatest} from 'redux-saga/effects';\r\nimport {LOG_IN,LOG_OUT,LOG_IN_SUCCESS,    LOG_IN_FAILURE,\r\n} from '../reducers/user';\r\nimport { takeEvery } from 'redux-saga/effects';\r\n\r\n\r\n\r\nfunction loginAPI()\r\n{\r\n    //서버에 요청을 보내는 부분\r\n}\r\n\r\n\r\nfunction* login()\r\n{\r\n    try{\r\n    //    yield call(loginAPI);\r\n    yield delay(100);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n    } catch(e)\r\n    {\r\n        console.log(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin()\r\n{\r\n  \r\n    takeLatest(LOG_IN,function* ()\r\n    {\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n\r\n        })\r\n    \r\n    })\r\n}\r\n\r\nfunction watchSignUp()\r\n\r\n{\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default function* userSaga()\r\n{\r\n     yield all([\r\n       \r\n         watchLogin(),\r\n         watchSignUp(),\r\n     ]);\r\n}"]},"metadata":{},"sourceType":"module"}