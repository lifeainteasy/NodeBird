{"ast":null,"code":"import { all, fork, call, put, take, delay, takeLatest } from 'redux-saga/effects';\nimport { LOG_IN, LOG_OUT, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST } from '../reducers/user';\nimport { takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction loginAPI() {\n  return axios.post('/login'); //서버에 요청을 보내는 부분\n}\n\nfunction* login() {\n  // yield call(loginAPI);\n  try {\n    //    yield call(loginAPI);\n    yield delay(100);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* Signup() {\n  try {\n    //    yield call(loginAPI);\n    yield delay(100);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, Signup);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/NodeBird/ch1/front/sagas/user.js"],"names":["all","fork","call","put","take","delay","takeLatest","LOG_IN","LOG_OUT","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","takeEvery","axios","loginAPI","post","login","type","e","console","log","Signup","watchLogin","watchSignUp","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAYC,IAAZ,EAAiBC,IAAjB,EAAsBC,GAAtB,EAA0BC,IAA1B,EAA+BC,KAA/B,EAAsCC,UAAtC,QAAuD,oBAAvD;AACA,SACIC,MADJ,EACYC,OADZ,EACqBC,cADrB,EACqCC,cADrC,EACqDC,cADrD,EACoEC,eADpE,EACoFC,eADpF,EACoGC,eADpG,QAEO,kBAFP;AAGA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GACA;AACI,SAAOD,KAAK,CAACE,IAAN,CAAW,QAAX,CAAP,CADJ,CAEI;AACH;;AAGD,UAAUC,KAAV,GACA;AACG;AACC,MAAG;AACH;AACA,UAAMd,KAAK,CAAC,GAAD,CAAX;AACI,UAAMF,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEX;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAMY,CAAN,EACF;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAMlB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEV;AADA,KAAD,CAAT;AAGH;AACJ;;AACD,UAAUc,MAAV,GACA;AACI,MAAG;AACC;AACA,UAAMnB,KAAK,CAAC,GAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAER;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAMS,CAAN,EACF;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAMlB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEP;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUY,UAAV,GACA;AAEInB,EAAAA,UAAU,CAACK,cAAD,EAAgBQ,KAAhB,CAAV;AACH;;AAED,UAAUO,WAAV,GACA;AACI,QAAMX,SAAS,CAACD,eAAD,EAAiBU,MAAjB,CAAf;AACH;;AAKD,eAAe,UAAUG,QAAV,GACf;AACK,QAAM3B,GAAG,CAAC,CAENC,IAAI,CAACwB,UAAD,CAFE,EAGNxB,IAAI,CAACyB,WAAD,CAHE,CAAD,CAAT;AAKJ","sourcesContent":["import {all,fork,call,put,take,delay, takeLatest} from 'redux-saga/effects';\r\nimport {\r\n    LOG_IN, LOG_OUT, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST,SIGN_UP_SUCCESS,SIGN_UP_FAILURE,SIGN_UP_REQUEST\r\n} from '../reducers/user';\r\nimport { takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios'\r\n\r\nfunction loginAPI()\r\n{\r\n    return axios.post('/login');    \r\n    //서버에 요청을 보내는 부분\r\n}\r\n\r\n\r\nfunction* login()\r\n{\r\n   // yield call(loginAPI);\r\n    try{\r\n    //    yield call(loginAPI);\r\n    yield delay(100);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n    } catch(e)\r\n    {\r\n        console.log(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        })\r\n    }\r\n}\r\nfunction* Signup()\r\n{\r\n    try{\r\n        //    yield call(loginAPI);\r\n        yield delay(100);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        })\r\n    } catch(e)\r\n    {\r\n        console.log(e);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin()\r\n{\r\n  \r\n    takeLatest(LOG_IN_REQUEST,login);\r\n}\r\n\r\nfunction* watchSignUp()\r\n{\r\n    yield takeEvery(SIGN_UP_REQUEST,Signup)\r\n}\r\n\r\n\r\n\r\n\r\nexport default function* userSaga()\r\n{\r\n     yield all([\r\n       \r\n         fork(watchLogin),\r\n         fork(watchSignUp),\r\n     ]);\r\n}"]},"metadata":{},"sourceType":"module"}