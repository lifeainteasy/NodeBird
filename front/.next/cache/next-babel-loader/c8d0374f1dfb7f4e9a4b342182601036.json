{"ast":null,"code":"import { all, fork, call, put, take, delay, takeLatest } from 'redux-saga/effects';\nimport { LOG_IN, LOG_OUT, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS } from '../reducers/user';\nimport { takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction loginAPI() {\n  return axios.post('/login'); //서버에 요청을 보내는 부분\n}\n\nfunction signUpAPI() {}\n\nfunction* login() {\n  // yield call(loginAPI);\n  try {\n    //    yield call(loginAPI);\n    yield delay(2000);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* Signup() {\n  try {\n    //    yield call(signUpAPI);\n    yield delay(100);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, Signup);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/NodeBird/ch1/front/sagas/user.js"],"names":["all","fork","call","put","take","delay","takeLatest","LOG_IN","LOG_OUT","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","LOG_OUT_REQUEST","LOG_OUT_FAILURE","LOG_OUT_SUCCESS","takeEvery","axios","loginAPI","post","signUpAPI","login","type","e","console","log","Signup","logOut","watchLogin","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAYC,IAAZ,EAAiBC,IAAjB,EAAsBC,GAAtB,EAA0BC,IAA1B,EAA+BC,KAA/B,EAAsCC,UAAtC,QAAuD,oBAAvD;AACA,SACIC,MADJ,EACYC,OADZ,EACqBC,cADrB,EACqCC,cADrC,EACqDC,cADrD,EACoEC,eADpE,EACoFC,eADpF,EACoGC,eADpG,EACqHC,eADrH,EACsIC,eADtI,EACuJC,eADvJ,QAEO,kBAFP;AAGA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GACA;AACI,SAAOD,KAAK,CAACE,IAAN,CAAW,QAAX,CAAP,CADJ,CAEI;AACH;;AAED,SAASC,SAAT,GACA,CAGC;;AAED,UAAUC,KAAV,GACA;AACG;AACC,MAAG;AACH;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX;AACI,UAAMF,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAEf;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAMgB,CAAN,EACF;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAMtB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAEd;AADA,KAAD,CAAT;AAGH;AACJ;;AACD,UAAUkB,MAAV,GACA;AACI,MAAG;AACC;AACA,UAAMvB,KAAK,CAAC,GAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAEZ;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAMa,CAAN,EACF;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAMtB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAEX;AADA,KAAD,CAAT;AAGH;AACJ;;AAGD,UAAUgB,MAAV,GACA;AACI,MAAG;AACC,UAAM1B,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAEP;AADA,KAAD,CAAT;AAGH,GAJD,CAKA,OAAMQ,CAAN,EACA;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAMtB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAER;AADA,KAAD,CAAT;AAGH;AACJ;;AAGD,UAAUc,UAAV,GACA;AAEI,QAAMxB,UAAU,CAACK,cAAD,EAAgBY,KAAhB,CAAhB;AACH;;AACD,UAAUQ,WAAV,GACA;AACI,QAAMzB,UAAU,CAACS,eAAD,EAAiBc,MAAjB,CAAhB;AACH;;AAED,UAAUG,WAAV,GACA;AACI,QAAMd,SAAS,CAACJ,eAAD,EAAiBc,MAAjB,CAAf;AACH;;AAKD,eAAe,UAAUK,QAAV,GACf;AACK,QAAMjC,GAAG,CAAC,CAENC,IAAI,CAAC6B,UAAD,CAFE,EAGN7B,IAAI,CAAC+B,WAAD,CAHE,EAIN/B,IAAI,CAAC8B,WAAD,CAJE,CAAD,CAAT;AAMJ","sourcesContent":["import {all,fork,call,put,take,delay, takeLatest} from 'redux-saga/effects';\r\nimport {\r\n    LOG_IN, LOG_OUT, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST,SIGN_UP_SUCCESS,SIGN_UP_FAILURE,SIGN_UP_REQUEST, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS\r\n} from '../reducers/user';\r\nimport { takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios'\r\n\r\nfunction loginAPI()\r\n{\r\n    return axios.post('/login');    \r\n    //서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction signUpAPI()\r\n{\r\n    \r\n    \r\n}\r\n\r\nfunction* login()\r\n{\r\n   // yield call(loginAPI);\r\n    try{\r\n    //    yield call(loginAPI);\r\n    yield delay(2000);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n    } catch(e)\r\n    {\r\n        console.log(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        })\r\n    }\r\n}\r\nfunction* Signup()\r\n{\r\n    try{\r\n        //    yield call(signUpAPI);\r\n        yield delay(100);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        })\r\n    } catch(e)\r\n    {\r\n        console.log(e);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* logOut()\r\n{\r\n    try{\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS\r\n        })\r\n    }\r\n    catch(e)\r\n    {\r\n        console.log(e);\r\n        yield put({\r\n            type: LOG_OUT_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLogin()\r\n{\r\n  \r\n    yield takeLatest(LOG_IN_REQUEST,login);\r\n}\r\nfunction* watchLogOut()\r\n{\r\n    yield takeLatest(LOG_OUT_REQUEST,logOut)\r\n}\r\n\r\nfunction* watchSignUp()\r\n{\r\n    yield takeEvery(SIGN_UP_REQUEST,Signup)\r\n}\r\n\r\n\r\n\r\n\r\nexport default function* userSaga()\r\n{\r\n     yield all([\r\n       \r\n         fork(watchLogin),\r\n         fork(watchSignUp),\r\n         fork(watchLogOut),\r\n     ]);\r\n}"]},"metadata":{},"sourceType":"module"}