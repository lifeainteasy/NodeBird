{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, delay, put } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from \"../reducers/post\";\n\nfunction addPostAPI() {}\n\nfunction addPost() {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI() {}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId\n            }\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/NodeBird/ch1/front/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","postSaga","all","fork","takeLatest","delay","put","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","addPostAPI","type","error","addCommentAPI","action","ADD_COMMENT_SUCCESS","data","postId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST"],"mappings":";;;;yBAQUA,O;;;yBAiBAC,Y;;;yBAUAC,U;;;yBAoBAC,e;;;yBAKeC,Q;;AA3DzB,SAASC,GAAT,EAAcC,IAAd,EAAmBC,UAAnB,EAA8BC,KAA9B,EAAoCC,GAApC,QAA+C,oBAA/C;AACA,SAASC,gBAAT,EAA0BC,gBAA1B,EAA2CC,gBAA3C,QAAmE,kBAAnE;;AAEA,SAASC,UAAT,GACA,CAEC;;AACD,SAAUb,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMQ,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNK,YAAAA,IAAI,EAACH;AADC,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMF,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAEF,gBADA;AAENG,YAAAA,KAAK;AAFC,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUd,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMM,UAAU,CAACG,gBAAD,EAAkBV,OAAlB,CAAhB;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAASgB,aAAT,GACA,CAEC;;AACD,SAAUd,UAAV,CAAqBe,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMT,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNK,YAAAA,IAAI,EAACI,mBADC;AAENC,YAAAA,IAAI,EAAC;AACDC,cAAAA,MAAM,EAAEH,MAAM,CAACE,IAAP,CAAYC;AADnB;AAFC,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYQ,iBAAMX,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAEO,mBADA;AAENN,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAAUZ,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMI,UAAU,CAACe,mBAAD,EAAqBpB,UAArB,CAAhB;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACL,YAAD,CADE,EAENK,IAAI,CAACH,eAAD,CAFE,CAAD,CAAT;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\r\nimport { all ,fork,takeLatest,delay,put } from \"redux-saga/effects\"\r\nimport { ADD_POST_REQUEST,ADD_POST_SUCCESS,ADD_POST_FAILURE } from \"../reducers/post\";\r\n\r\nfunction addPostAPI()\r\n{\r\n\r\n}\r\nfunction* addPost()\r\n{\r\n    try{\r\n        yield delay(2000);\r\n        yield put({\r\n            type:ADD_POST_SUCCESS,\r\n        });\r\n    }catch(e)\r\n    {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: e,\r\n\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost()\r\n{\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\n\r\nfunction addCommentAPI()\r\n{\r\n    \r\n}\r\nfunction* addComment(action)\r\n{\r\n    try{\r\n        yield delay(2000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:{\r\n                postId: action.data.postId,\r\n            },\r\n        });\r\n    }catch(e)\r\n    {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e,\r\n\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddComment()\r\n{\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\n\r\nexport default function* postSaga()\r\n{\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment)\r\n\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}